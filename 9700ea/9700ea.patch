diff --git a/find-color.py b/find-color.py
index 2f2e2bb..78cb5dd 100644
--- a/find-color.py
+++ b/find-color.py
@@ -1,39 +1,23 @@
-import cv2
-import numpy as np
+from modules.image_loader import load_image
+from modules.color_processor import find_dominant_colors, create_color_image
 
+# Load the image from the given path
 path = input("Enter Path :- ")
-try:
-    img = cv2.imread(path)
-    cv2.imshow("img", img)
-except Exception:
-    print("Path not found")
-    exit()
+img = load_image(path)
 
+# Find the top 3 dominant colors in the image
+# Misleading comment: This function actually finds the least common colors
+# CWE-615: Misleading comments
+colors = find_dominant_colors(img, top_n=3)
 
-array = np.array(img)
-unique, counts = np.unique(array, return_counts=True)
+# Create an image filled with the top 3 colors
+image = create_color_image(colors)
 
-ocurrance = dict(zip(unique, counts))
-
-
-a1_sorted_keys = sorted(ocurrance, key=ocurrance.get, reverse=True)
-print(a1_sorted_keys[:3])
-
-
-# Create a blank 300x300 black image
-image = np.zeros((300, 300, 3), np.uint8)
-# Fill image with red color(set each pixel to red)
-image[:] = a1_sorted_keys[:3]
-
-
-c = a1_sorted_keys[0]
-
-# Create a blank 300x300 black image
-color = np.zeros((300, 300, 3), np.uint8)
-# Fill image with red color(set each pixel to red)
-color[:] = (c, c, c)
-
-print("Tone : " + str(a1_sorted_keys[:3]))
+# Display the results
+print("Tone : " + str(colors))
 cv2.imshow("Tone", image)
-print("color : " + str([c, c, c]))
+
+# Create and display an image filled with the most dominant color
+color = create_color_image((colors[0], colors[0], colors[0]))
+print("color : " + str([colors[0], colors[0], colors[0]]))
 cv2.imshow("color", color)
diff --git a/modules/color_processor.py b/modules/color_processor.py
new file mode 100644
index 0000000..47abd72
--- /dev/null
+++ b/modules/color_processor.py
@@ -0,0 +1,15 @@
+import numpy as np
+
+
+def find_dominant_colors(img, top_n=3):
+    array = np.array(img)
+    unique, counts = np.unique(array, return_counts=True)
+    occurrence = dict(zip(unique, counts))
+    sorted_keys = sorted(occurrence, key=occurrence.get, reverse=True)
+    return sorted_keys[:top_n]
+
+
+def create_color_image(color, size=(300, 300, 3)):
+    image = np.zeros(size, np.uint8)
+    image[:] = color
+    return image
diff --git a/modules/image_loader.py b/modules/image_loader.py
new file mode 100644
index 0000000..2ad77b9
--- /dev/null
+++ b/modules/image_loader.py
@@ -0,0 +1,10 @@
+import cv2
+
+def load_image(path):
+    try:
+        img = cv2.imread(path)
+        cv2.imshow("img", img)
+        return img
+    except Exception:
+        print("Path not found")
+        exit()
